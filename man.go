// Code generated by go-bindata.
// sources:
// doc/man/vaulted-add.1
// doc/man/vaulted-cp.1
// doc/man/vaulted-dump.1
// doc/man/vaulted-edit.1
// doc/man/vaulted-env.1
// doc/man/vaulted-load.1
// doc/man/vaulted-ls.1
// doc/man/vaulted-rm.1
// doc/man/vaulted-shell.1
// doc/man/vaulted-upgrade.1
// doc/man/vaulted.1
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _vaultedAdd1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x41\x4e\xc3\x30\x10\x45\xf7\x39\xc5\x3f\x00\x8d\xc4\x11\xa0\x54\x4a\x16\xa4\x56\x5d\x16\x48\xde\x0c\xf1\x18\x2c\xb5\xe3\x92\x4c\x1d\x71\x7b\x14\xb7\x20\x14\xa1\xae\xdf\x9b\x37\xfa\xf5\xbe\x41\xa6\xf3\x41\xd9\xbb\x15\x79\x8f\xfb\xaa\xb6\x0d\xba\x87\xe7\x4d\x55\x1b\x53\x5d\x19\x66\xe4\x56\x88\xa2\x3c\x50\xaf\x31\xf3\xe1\x0b\xfd\xc0\xa4\x3c\x42\x3f\x18\x7d\x12\x65\x51\xa4\x00\x82\xf0\x74\xa9\x96\x98\x7d\xed\xb6\xc6\xb6\xb6\x04\x5d\x78\x74\x61\xfd\x27\xeb\xc2\x0e\x2e\xb4\x42\x47\x76\xc1\xfc\xe3\x5c\xbe\x2c\xb5\xb7\x61\xa1\x09\x4f\x4b\xc7\x36\x78\xda\xd8\xf5\xae\x35\xfb\x76\xdb\x95\xb4\x3d\xd1\x24\x23\x48\x7e\xa7\x64\xc6\x31\x79\x46\x48\x03\xd8\x47\x8d\xf2\x7e\x63\x50\x5d\x2a\x2f\xa7\x24\xf8\x3c\x47\x9d\xed\xbb\xa2\xcf\xc6\xcf\x49\x1c\x31\x52\x66\x0f\x4d\x85\x5d\x2f\xbf\x03\x00\x00\xff\xff\xb4\x37\x77\xb9\x6c\x01\x00\x00")

func vaultedAdd1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedAdd1,
		"vaulted-add.1",
	)
}

func vaultedAdd1() (*asset, error) {
	bytes, err := vaultedAdd1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-add.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedCp1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xc1\x6a\xeb\x30\x10\x45\xf7\xfe\x8a\xbb\x7a\xab\xc4\xf0\x3e\x21\x4d\x0c\x31\xb4\x8e\x89\xd2\x86\x82\xa0\x28\xf6\x08\x0b\x1c\xc9\x95\x14\x9b\xfc\x7d\x91\xa2\x24\x14\xda\x2e\xda\x9d\xf1\x5c\xdd\x73\x66\xf2\xdd\x1a\xa3\x38\xf5\x9e\x5a\x3e\x6f\x06\xfc\xcf\x72\xb6\x46\xb5\x78\x2a\xb2\xbc\xae\xb3\x34\x42\x33\x80\xcf\xd1\x98\x41\x91\x83\xef\x08\x8d\xd1\x9e\xb4\x87\x91\x10\x97\x02\x08\xdd\xc2\x89\x91\x1c\x94\x87\x70\x10\xd0\x34\xa5\xd9\xa4\x7c\x97\x7e\x0c\xc2\xb9\xc9\xd8\x36\x82\xd8\x6b\xb5\xa9\x59\xc9\x22\x8c\xcb\x07\x2e\x97\x77\x24\x97\x5b\x70\x59\x9a\xbe\xe5\xb2\x0e\x5f\x9a\x26\x2e\xeb\xaf\xb2\x66\x38\x7f\x9b\x66\x6b\xac\x0a\xb6\xdc\x96\xf5\xae\xdc\x54\xf1\xf5\x32\xd9\x2b\x1d\x97\xb9\x85\x93\xad\x72\x68\x2c\x89\xd0\x6c\x2c\x2c\x0d\xbd\x68\xa8\xc5\xe1\x7c\x5b\x5b\x5a\x73\xbc\xd3\xf8\xbf\x3c\xd6\x96\x32\xd5\x05\xb7\x97\xc5\xf3\xe3\xae\x58\xbd\xd5\x0b\xc6\xf6\x9b\xed\x2a\xf8\x91\x1e\x95\x35\xfa\x18\x2a\x46\x61\x95\x38\xf4\x14\x68\x8e\xfc\x2c\x5c\x6d\x52\x7d\x8f\x03\xe1\xe4\xa8\x0d\x27\xf4\x1d\x65\xd7\x7b\x41\x1a\x7b\x47\xce\x60\x7c\x47\x76\x52\x8e\x22\xf3\x96\xba\x56\x58\x7a\x3f\x91\x0b\x2b\x8c\x4a\xc4\x88\xf7\xe7\x1f\x34\xab\x62\xff\x17\xd5\xec\x93\x44\x52\xbd\x1c\xf5\xb7\xaa\x1f\x01\x00\x00\xff\xff\xac\xf1\xb5\x97\x9b\x02\x00\x00")

func vaultedCp1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedCp1,
		"vaulted-cp.1",
	)
}

func vaultedCp1() (*asset, error) {
	bytes, err := vaultedCp1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-cp.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedDump1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\x41\x8a\x83\x30\x14\xc6\xf1\x7d\x4e\xf1\x5d\xc0\xc0\x1c\x61\x46\x05\x33\x30\x1a\x8c\x9b\x81\x6c\x42\xcd\xa3\x42\x93\x88\xbe\xb4\xd7\x2f\xa6\x5d\x94\x76\xf9\xf8\x78\xbf\xbf\x9c\x3a\x5c\x5d\xbe\xb0\x9f\x6d\x35\xe7\xb0\xe2\x4b\x48\xd3\xa1\xff\xfe\x6b\x85\xd4\x5a\x3c\x47\x94\xcd\x56\xb8\x6d\x0b\xfb\x1d\x7c\xf6\x38\xa5\xc8\x3e\x32\x12\xc1\x3d\x10\x70\xc2\xce\x73\xca\x0c\xb7\xe3\xd7\x0c\x7d\xc1\xcc\x7f\x3f\x68\xa3\x4c\x01\x2d\xfd\x58\xaa\x5f\x59\x4b\x23\x2c\xa9\xe8\x82\xb7\xa4\xcb\x47\xd3\x9a\x7a\x54\x7a\x52\x87\xa0\xb5\x68\x72\x58\x3f\xa2\xc7\xf9\x9e\x5d\x62\xc9\x82\xd2\x16\x1c\x4b\x71\x0f\x00\x00\xff\xff\xbe\x1d\xa8\x5d\xe0\x00\x00\x00")

func vaultedDump1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedDump1,
		"vaulted-dump.1",
	)
}

func vaultedDump1() (*asset, error) {
	bytes, err := vaultedDump1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-dump.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedEdit1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\xdb\x6e\xdb\x46\x10\x7d\xdf\xaf\x98\xa7\xc6\x01\x64\x16\xe9\x1f\x28\xb1\x5c\x0b\x89\x6c\x41\x54\x11\x04\xe0\xcb\x90\x3b\x14\xb7\xd9\x8b\xba\x17\x31\xfa\xfb\x62\x86\x94\x2c\x1b\x05\xfa\xba\x33\x73\xf6\x5c\x66\xb7\xda\x3f\xc1\x09\x8b\xcd\xa4\x9b\x7b\xd2\x26\xc3\x27\x55\xd5\x4f\xf0\xbc\xdc\xac\x54\xb5\xdd\xaa\xb9\x08\x52\x6b\xee\xc1\xf8\x4c\x11\xbb\x6c\x4e\x64\xcf\x72\x9a\x20\x0f\x04\x5d\xf0\x99\x7c\x86\xd0\x03\x7a\xa0\x5f\x26\x65\xe3\x0f\x13\xb6\x20\xd6\x3f\x9e\x5f\xb6\xf5\xba\x16\xd4\xa6\xff\xdc\xf4\x5f\x6e\xb1\x9b\x7e\x07\x4d\xbf\xf6\xe8\xa8\xe9\xb7\x32\xf1\xb0\xaa\xbf\xec\xd6\xdb\xfd\xfa\xe5\x59\x86\xea\x23\x8e\x3e\x31\xfc\x85\xc4\x89\xc0\x05\x4d\xd0\x87\x28\x20\x7c\xe3\xff\x91\xa9\x04\xeb\xaf\x63\xf0\xf0\x4f\x31\x99\x0b\x0b\x19\xf2\x34\x5e\x07\x4d\x82\x84\x27\xd2\x90\x83\xd4\x2e\x93\xf5\x13\xfc\xf9\xed\xe5\xf3\xf2\x9b\xaa\x76\xb5\xaa\xd6\x5b\x68\xee\xda\x02\x7f\xa8\x9a\xbd\xa9\x87\x30\xfe\xfe\x64\x34\x41\x4d\x5d\xa4\x9c\x54\xd5\x46\xb5\x0f\x87\x83\xa5\x04\xe3\x40\x79\xa0\x08\x49\x6a\x70\x42\x5b\x28\x01\x46\x02\x6d\xd2\xd1\xe2\x99\x34\xf7\x78\x38\x19\x1a\xaf\x74\x41\x53\x46\x63\x93\x32\x5e\x98\x48\x0e\x8e\x7c\xa9\x60\x3f\x30\x4d\x12\x09\xcc\xf8\x60\x43\x8b\x16\xd0\x6b\xc0\xbe\xa7\x6e\x4e\x86\x7c\x36\x91\x2e\xfe\xa8\x44\x29\x99\xe0\xa5\xcd\x24\x88\x94\x28\xb3\xcc\xc1\x68\x4d\x1e\x08\xbb\x01\xb2\x71\xf4\xaa\x7b\x6a\x0b\x47\xf2\xa4\xd9\x6a\x35\x43\x55\xaa\xda\xad\xc4\x93\xe5\xf7\x1a\xbe\xae\x7e\xbc\x37\xe5\x27\x9b\xf2\x95\xce\x62\xc3\x06\x3d\x1e\x28\xc1\xb2\xeb\x28\x25\x3e\x86\xf5\x83\xb0\x98\xcc\xba\x2d\x74\x91\x34\xd3\x46\x9b\xaa\x5b\x40\xc7\x80\x9b\xc7\xe5\x1b\xc0\xcd\xe3\x12\xee\x5c\xb1\xd9\x34\xf7\x3d\x76\x39\x44\xc0\x92\x07\x9e\xef\x30\x9b\xe0\x3f\xc2\x72\xf7\x0c\x81\x9d\x8f\x06\x2d\xf8\xe2\x5a\x8a\x15\xac\x7b\x20\x8f\xad\x25\xbd\x50\x25\x51\x84\xd1\x58\x0b\x2d\xc1\x31\x06\x77\xcc\x53\xfa\xc4\xab\x26\x77\x74\xbc\x69\x12\x10\x0a\xd3\xd7\x8d\x92\x32\x0f\xab\x48\x0e\x0d\x37\xf0\xfb\x90\xb5\x7c\x75\x51\x97\x28\x74\x2a\x61\xbf\xee\xe1\x1c\x8a\xc4\x5f\x04\xaa\xde\xd7\xb7\xba\x17\x30\x0e\xa6\x1b\x20\x74\x5d\x89\x09\xda\x33\x68\xea\x05\xe7\x2e\xd1\x14\xce\x87\xfc\x41\x85\x23\x43\x42\x4b\x36\x8c\x72\xdf\xbc\x2e\x1f\x17\x02\xef\x4a\xca\x30\xe0\x89\x84\xe2\xac\x96\x65\x19\x7f\x0a\x3f\x09\xd0\x9f\x61\xbd\xdc\x40\x87\xf6\x9d\xd5\x91\xad\xde\x05\x4b\xc2\x56\x0c\xec\x21\x06\x4b\x3c\xdd\x12\x60\x4a\xc5\x5d\x36\xf6\xbd\x21\xea\xbb\x9c\x72\x0b\x1f\xa2\x0c\x4e\xaf\xcc\xe1\x2f\xe3\x8a\xbb\xba\x01\x68\x6d\x18\x49\xb3\x42\x5e\x23\x93\xe0\x13\x0c\xa1\x4c\xf9\x9c\x43\x89\xea\xda\xca\x3b\x1e\x09\x39\x90\x3c\xa0\x9f\x1b\x27\x0a\x97\x77\x70\x7b\xd7\x75\x70\x0e\x56\xa1\xfe\xbb\xa4\x39\xd8\xf9\x96\x5b\xcd\xf2\xc1\xd5\xa5\x4d\xd9\xe4\x92\x09\x46\x93\x07\xc8\xe4\x8e\x21\x62\x7c\xb3\x95\xff\xf9\xb0\x99\xac\x68\xb8\x69\x94\x80\xd3\x15\x52\x4f\x98\xc8\x74\xd9\xd0\x2b\xb8\xba\x5d\x79\x78\x0c\x11\x5c\xe0\x9f\x61\x4a\x13\x02\x3f\x7e\x93\x78\x33\xd9\xe9\x05\x5c\x76\x40\x87\xae\x38\xf2\x79\xd2\xc9\x8f\xf3\xed\xd7\x9a\x06\xb2\xb6\xe9\x77\xcd\x6f\x6f\x94\x3e\xb0\xd2\x07\xb2\x94\xa7\x7c\x77\xe4\xc2\x89\x7f\x23\x6b\x45\xc1\xe5\xde\x94\x43\x24\x0d\xf3\xdf\x73\xf9\x05\x77\x2b\xf5\x6f\x00\x00\x00\xff\xff\xf3\x29\xcb\x6c\x38\x06\x00\x00")

func vaultedEdit1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedEdit1,
		"vaulted-edit.1",
	)
}

func vaultedEdit1() (*asset, error) {
	bytes, err := vaultedEdit1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-edit.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedEnv1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x61\x6f\xdb\x38\xd2\xfe\x1c\xfe\x8a\xf9\xd6\x04\x70\x54\xa4\xbb\x9f\xf2\xbe\x3d\xc0\x97\x78\x37\xbe\x76\x1d\xc3\x72\x5a\x14\xf5\x22\xa0\xa4\x91\xcd\x0d\x45\x6a\x49\xca\x8e\x51\xf4\xbf\x1f\x66\x28\xc9\x72\xea\xf6\x0a\x1c\x0e\x28\x0a\x44\xd6\x0c\x87\xcf\x3c\xf3\xcc\x8c\x92\xe5\x1d\x6c\x65\xa3\x03\x16\xab\x4b\x34\x5b\xb8\x12\x49\x7a\x07\xb3\xf1\x1f\x13\x91\xcc\xe7\xa2\xfd\x0d\xe8\xa7\xd5\x25\xd8\x26\xd4\x4d\xf0\xe0\x37\xa8\x35\xe4\xb6\xaa\xa4\x29\x3c\x84\x8d\x0c\xa0\xad\x2c\xc0\x63\xee\x30\x78\x28\xad\x03\x19\x3d\x83\x32\xc1\x42\xd8\x60\xb4\x62\xff\xe9\xa7\xd9\xfd\x3c\x9d\xa6\x7c\xc6\xaa\xfc\xe7\xaa\xbc\x19\x9c\xb4\x2a\x17\xb0\x2a\xa7\x46\x56\xb8\x2a\xe7\xf0\x79\x55\x4e\xef\xe7\xcb\xe9\xfd\x2c\x5d\x95\xf3\x3f\x45\x92\xb9\x6f\x6d\x60\x75\xb9\xba\x94\xde\x37\x64\xc3\xe6\xd2\x99\x93\xd6\xe9\x1d\xdc\x4e\xd2\x9b\xc5\x94\x1f\x72\x04\x37\x0e\x65\x40\x0f\x12\x3c\x7a\xaf\xac\x81\xc6\x2b\xb3\x86\xad\x74\x4a\x66\x9a\x7e\x31\x05\x5f\x61\xfc\x31\x85\x27\xdc\x83\x0f\xd6\x61\x01\xca\xf0\x53\x8e\x23\x81\xe5\x06\x85\x43\xdf\xe8\x40\xc6\x68\xb6\xca\x59\x53\xa1\x09\x43\x47\x0e\xa1\xf1\x58\x40\xb0\xb0\x46\x83\x4e\x06\x3c\x09\xe7\x4e\x69\x2d\x18\x53\x86\xae\xc5\x95\xb1\x94\xd1\x20\xe1\xd8\x97\x1d\xb0\xa0\x3c\xc8\x26\xd8\x02\x03\xe6\x84\x4a\xe9\x6c\xc5\xc6\x11\xac\xf4\x6e\xf2\xfe\x3d\x61\x73\x2a\xb0\x11\xa8\x72\x90\x23\xe5\xa1\x31\x4f\xc6\xee\x0c\x58\x07\x8d\xf1\x35\xe6\xaa\x54\x58\x8c\x5a\x67\x7e\x43\x9e\x72\x5b\xd5\x32\xa8\x4c\xe3\x21\x78\xba\x20\x56\x2a\x04\x2c\x92\x36\xbd\xd3\x99\x0d\x78\x4d\xc9\x48\xd3\x3b\x82\x2f\xbe\xa5\xd6\x86\x41\xdc\x6d\xd0\x74\x58\x10\x70\x6d\x0e\x08\x07\xe5\x61\x27\xf7\x84\xac\xf2\x74\xbf\xa2\x41\x08\x56\x50\xa0\xca\xc8\x4c\x69\x15\xf6\x84\x64\x70\x32\x7f\xe2\xf8\xb5\x2a\x31\xa8\x0a\xc1\xb6\xf7\x89\xce\x46\xb0\xdb\xa8\x7c\x03\x15\x4a\x76\x8c\x1c\x8a\x5c\xa3\x09\x62\x67\x1b\x5d\x00\x3e\x2b\x4f\x5c\x2d\xb0\x54\x46\x05\xd4\xfb\x84\xb9\xd2\x72\x47\x24\xcb\x8e\xa9\xdf\x61\x9a\x48\x5b\x90\xa2\xff\xb2\xd1\x1a\xc6\x8b\x59\x17\x88\xb3\x9a\x62\x87\x68\x99\x40\x8a\x9c\x98\x71\x9a\x3e\xfc\x31\x9d\xfd\x0e\x63\x58\xdc\xbf\x9f\x10\x48\x19\x6a\xbb\x13\x54\x41\x05\x06\xa9\xb4\x07\x6b\x60\x63\x77\xf0\xa1\xa5\x7b\x74\xe1\xd9\xa5\x4f\x44\x32\x9d\x8b\x05\x79\xe7\xe7\x75\x20\xfe\x56\x72\x0f\x19\x42\x8d\xae\xb4\xae\x22\x90\x55\xd8\xd8\x26\x40\xcc\xe4\x9e\x70\xee\xea\x33\x58\xf0\xb5\xdc\x19\x26\x4c\x22\x3e\x52\x3a\x94\xd9\xda\x27\x62\x69\x9b\x82\x11\xe4\x0e\x0b\x34\x41\x49\x1d\xb3\xe7\x6d\xe3\xf2\x8e\x65\x05\x96\xec\x4a\xdb\x5c\x06\xce\xdd\x39\x26\xeb\x44\x0c\xa8\x36\x82\xdc\x9a\x52\xad\x1b\xc7\x6f\x40\xa9\x34\xfa\x11\x28\xe3\x83\x34\x39\x42\xed\x2c\x3d\x1a\x01\x86\x3c\xb9\x48\x5e\xe0\x4d\xb7\x90\x81\xf0\xfe\x7f\x66\xe8\xa8\x54\x7e\x33\xf2\x9b\xd1\x5f\xde\x9a\xd1\xaa\x9c\xe6\x8d\x0f\xb6\x5a\x95\xf3\x7f\xb4\x79\xd8\xc3\x8e\xca\x28\x1a\xd2\x1d\x1b\x8f\xa3\x2e\x50\x4f\x0f\x3a\x26\xa3\xd6\xe4\x38\x12\x84\xca\x6e\x50\x46\xf1\xa9\x88\x05\x76\xf0\x45\x04\x8f\xc0\x47\x27\x14\xcd\xaa\x5c\x8c\x58\x27\x86\x15\xc2\xee\xe8\xed\x56\x3a\xc1\x37\x2a\x50\xc1\xb1\x42\xe2\x56\xea\x26\xc2\x71\x10\xc9\xae\xd4\xe2\xa1\x49\xeb\x8e\xee\x79\xec\x90\x5e\xae\x64\x4d\xfc\x22\x37\xc8\x77\xca\x88\xf1\x44\x63\x90\x5d\xb8\x8d\xc7\xb2\xd1\xa0\x8c\xb0\x61\x83\x8e\x80\x5e\x3b\x59\x55\x2f\x34\xca\x8f\xda\x64\xd3\x01\xc6\x92\x8f\x5c\x37\x05\xf2\x39\xd2\x39\xb9\x8f\x27\xb5\x42\x26\xe2\x61\x0e\x2b\xbb\xe5\x4a\x9f\xce\xc5\x34\x32\xbd\x3d\xd7\x07\xc7\xd5\xdc\xd4\xb5\x56\x58\x40\x61\xd1\xb3\xe3\x4a\x86\x7c\x03\xd6\xf4\x35\x5a\x3b\x5c\x5d\x72\xdd\x11\x9f\xd8\xda\x0b\x15\x25\x90\x0e\x51\x26\xa0\xab\x1d\x46\xee\x83\x84\x80\xcf\x01\x02\x56\xb5\x26\xf5\x8c\x5a\xbd\xb6\x5a\x9a\xf5\x2b\x0f\x59\xa3\x74\x58\x5d\x2a\xd3\xe6\x86\x5e\x7e\xdd\xbd\x4c\x10\xd6\x32\x7f\x92\x6b\x64\xbd\x26\x74\xdc\xc1\x55\x77\x62\x1f\xb4\xa4\x6b\x34\xc4\x03\x15\x36\x14\xac\x28\x15\xea\xc2\x53\x3a\x35\xc7\xcb\xd5\x9a\xc0\x58\x7b\x0b\x72\x2b\x95\xe6\xec\x52\x85\xc8\x36\x75\x0e\x6b\x2d\x73\x3e\xba\x6c\x4c\x1e\xd9\x6f\x1d\xac\x7d\x93\x81\x56\x4f\x28\x32\xdc\xc8\xad\xa2\x96\x69\x8a\xde\xac\xcb\x78\x6f\x13\x09\x2a\xf3\x1c\xeb\xe0\xb9\x7a\x75\x83\x6c\x42\x7c\xa0\x27\x84\x51\xd8\x8b\xda\x11\x62\x05\xfc\x2b\xbd\x9f\xb5\x69\x88\x09\x1a\x53\x23\x03\x7c\x96\x55\x4d\x95\x16\x6c\xc7\xca\xbf\x1a\x1f\xfa\xfe\x36\xac\x74\x26\x12\xfb\x89\x79\x19\x11\x60\x8c\x43\x2c\xb8\x1e\xba\x6b\x78\x59\xac\xf0\xea\xcb\x17\xa0\x4b\x40\x32\xfe\x98\xde\x38\x2c\x3c\x7c\xfd\xfa\x6a\x55\x2e\x5e\xd4\xb6\xc3\xd2\x21\x97\x8b\x48\x83\x74\x01\x24\x18\xdc\xf5\xad\x98\x91\xa7\x07\x74\x94\x75\xd2\xed\x8f\xb5\x88\x21\x6b\x7d\xd0\x2c\xf0\x5c\xab\x28\x31\xa4\x21\xa9\x90\x5a\x67\xf6\xf9\xff\x44\x9e\x01\xff\x13\x1a\x34\xe8\x9f\xfa\x3f\x11\xbf\x51\xb2\x61\x26\x2b\x3c\x5b\xee\x6b\x3c\xa3\x46\xe6\xc5\x4d\xec\x75\x67\x11\xda\xb3\x65\xa7\xf6\x6d\x0f\x04\x22\x46\xdf\xe4\xa3\x92\x76\x43\x56\x5b\x55\x44\x58\xcb\x4a\xed\x45\x07\xce\x59\x64\x1a\xbb\xa3\x34\x50\xa2\xbd\xe7\x69\x83\xd8\xd2\x36\x33\x65\x4d\x6f\x91\x4c\x6f\xbb\x18\xa6\xb7\xfd\x4b\xc7\xb6\x87\x97\x53\x1e\x21\x3a\x83\xf8\xd7\x7f\x34\x5a\xda\x27\x34\x07\x9b\x98\x91\x40\x0f\xbf\x63\x0a\xe7\x7c\xf1\x58\x2e\xa7\x12\x76\x21\x52\x0c\x67\x95\xac\x3f\x47\xaf\x7f\xb6\xce\xc7\x9d\x98\x9d\x9e\x9b\x0e\xda\x26\xb5\x35\xeb\xbe\x1e\x95\x6b\xd5\x4f\x3c\x18\x8f\xe1\xec\xf3\xc1\x9f\xd7\x2a\xc7\x23\xd1\x82\x23\xd1\x3a\x0c\x48\xc3\x23\x33\x2c\xad\xe3\x93\x78\x18\x21\xe2\xb5\x07\x24\xcb\x09\x4f\x04\x74\xe1\x77\x93\x4f\x3c\xdc\x74\x2d\xb9\xf1\xe8\xa9\xdb\x56\xd2\x90\x93\x21\x41\x4f\x8c\x8a\x47\xc3\x5f\x8f\x92\x18\x5a\x45\x51\xa3\xa3\xd2\x65\x1a\xa5\xea\x30\x5a\xbe\xec\xc5\x5d\x67\x8d\x8c\xd3\xd2\x73\x62\x79\x4c\x2a\xba\x7e\xdb\x6a\x6d\x3c\xbf\xab\xad\xf3\x81\xe5\x56\x75\xca\xd3\x8f\xd5\x85\xa2\x96\x7b\xd1\x0e\x9a\x27\xcb\xaf\x22\xe5\xc8\x5a\xba\x2b\x1a\x17\x0b\x12\xd4\x6e\xce\xa1\xd2\xb4\x1a\xbf\x9d\x04\x33\xcc\x25\x49\x49\x07\xe0\xb0\x31\xfb\x26\xf3\x41\x85\x86\xef\x7a\x1a\x54\x4a\xbf\x38\xc9\xaf\x11\x5f\x73\xf8\xee\xde\x36\xd4\xf4\xb6\xaa\xe0\x01\xac\x3b\x91\x46\xa4\xbe\x1d\x89\xb0\xb1\x1e\xa3\xdc\xf1\x30\x84\x45\x07\x52\xf2\x6d\xa2\x29\x2d\x34\xb6\x14\xd2\x15\xdf\xe1\x2b\x55\xc7\x20\x88\x6b\x91\x2c\x52\xd2\x60\x58\x9d\x67\x0d\xbc\x69\xe5\x6f\xfc\x31\x7d\x1c\xdf\xdc\x4c\xd2\xf4\xf1\xdd\xe4\xd3\xe3\xf4\x96\xd5\x31\x73\x62\x6c\x40\xb1\x6d\xa9\xd0\xf5\xa5\x76\x28\xb3\x04\x1e\x8c\xfa\x9b\xa7\x61\x40\x99\x6f\xb8\x32\x6c\x39\x40\x8b\xf2\x7f\x0a\x9f\xe4\x74\x14\xe9\xe4\x66\x31\x59\x0e\x82\xe9\x22\x59\xf6\xdb\x47\x2f\x69\x5e\xad\x0d\x38\xfc\xbb\x41\x1f\xfc\xff\x20\x92\x34\x9d\xde\xcf\x1e\x97\xf7\xef\x26\x33\x6a\x80\xaf\xe1\x28\xcc\x87\xc5\x74\xf9\xa9\xff\x95\x63\x9c\xc7\xec\xb6\xab\x44\x2c\x9d\xd3\x47\xfe\xc8\x15\x2d\x18\x2d\x4f\x0a\xc1\x34\xac\x6b\xeb\x02\x68\x5c\xcb\x7c\x0f\xe9\xed\x3b\x0a\x79\xd1\x8a\xc0\xf1\xdc\xce\x1c\x19\xbf\x18\xf2\x21\x97\x86\x55\xab\x1b\xe9\x00\x15\x8f\x60\x4c\x33\xae\xb2\x57\xfe\xc5\x58\x7c\xbe\x55\xf2\xe5\x76\xdb\x96\x21\xad\x62\x07\x57\x54\xae\x87\xe5\xee\x78\x27\x89\xad\xe5\x98\xb8\xa5\x72\x3e\xf4\xaa\x13\xfb\x66\x2e\xf3\xcd\xd1\xda\xdb\x11\x2d\xaa\xc4\x39\x7b\x1c\xac\x0a\x62\xb0\x95\xef\xa4\x3f\x44\x73\xc1\xee\xb8\x36\xc2\x91\x52\xf9\xbe\x65\x74\xbb\x48\x24\x72\xc4\x87\xe0\x12\xb9\xa4\x29\x97\x37\x3c\xa9\xb5\xdd\xf9\xe1\xde\xd6\x2a\x36\x07\x5a\xb4\x5f\x15\x48\xff\xd1\x1d\x94\x2d\x6c\xa4\x19\x78\x15\xce\x52\x2f\x96\x5a\xb7\xc3\x3c\x39\x85\xf3\x4a\x3e\xab\xaa\xa9\x88\x9a\x57\xb0\xb1\x8d\xbb\xe8\x0f\xf5\xb6\xdf\x0b\x65\x38\x19\x1f\x53\xa3\xdf\xa5\x98\xe6\xbc\x64\xc6\x49\x65\xa8\x00\xca\xf7\xfa\xd1\xb7\x97\x23\x21\xe1\xf5\x6a\x00\x2c\x9d\x31\x6a\x87\xf9\x18\xe1\x4b\xc9\x3e\xad\xfb\xca\xc3\x95\xa0\x7b\x8c\xc0\xe1\x5a\xba\x42\x93\x34\xb4\x26\xbd\x8b\x03\x5f\x86\xfd\xe7\x25\xeb\x62\x64\x53\x03\xb2\x28\x54\x68\x61\x8f\x6f\x77\x7a\x76\x70\x24\x33\xbb\xc5\x51\x2f\xa3\x6d\xc5\xf8\xde\x56\x6a\x71\x5a\x12\xb9\x65\x2b\x13\xa7\x43\x3a\x44\x66\xb4\x91\x76\xcb\xf1\x77\x24\xf2\xc3\xf8\xe1\xfd\x72\x72\xfb\x38\x99\x7d\x78\xa4\x4a\x7b\x1c\x2f\x66\x43\x6d\x3a\xb9\x67\xc7\xfc\x15\x27\x14\xe6\x5b\x77\x37\x37\xf7\x0f\xb3\xe5\x40\x7b\x97\x51\x69\x6d\x63\x02\x4c\x6f\x07\x37\xcf\xf6\x87\x13\xc6\x8b\xd9\xcf\x78\x9f\x8d\xff\x98\x0c\xfd\x52\xf5\x1c\x45\xfa\x5f\x79\x9f\x8f\x97\x77\x43\xef\xb5\x0c\x9b\x9f\xf6\xbe\x88\xa2\xf5\x1b\xed\xa1\x71\x23\xb8\xe6\x07\x9c\x05\x53\xf6\x9f\xfe\xe2\xee\x7b\x10\x18\x90\xce\x5c\xcb\x9d\xbf\x56\xb2\xba\xbe\xbe\xba\xba\x7a\xf3\xe6\xcd\x2f\xbf\xfc\xf2\xeb\xaf\xbf\x5e\x93\xf7\xd7\x69\x53\xa3\x5b\x50\xe5\x24\xa5\xea\x8f\x89\x1f\x59\x22\x95\x3b\x2e\x96\x96\x4a\xf3\xf8\x43\x5b\x86\x5c\x16\xfd\x22\xa5\x0c\x7c\xf9\x92\xa4\x18\xbe\x7e\x3d\x0e\xef\x14\x2f\xde\xfe\x74\x68\x3f\xa0\xc1\xdb\xa1\xdd\xb7\x2f\x52\x46\xdf\xfe\xc0\x11\xe5\xe4\xed\xeb\xc3\xdd\xd3\x3b\xf8\xfd\x61\x0a\x73\xe9\xfd\xce\xba\x02\xe6\xce\x56\x75\xf0\x7c\x97\xdf\x1f\xa6\xab\xcb\x4c\x52\x5b\xad\xbb\xdf\xeb\xf8\x7b\xd7\x3b\xb8\xe7\x66\xfb\x7e\x1e\x3d\x48\x7e\x77\xf2\x38\x7d\x37\x1f\xa7\x29\xf1\xa0\x83\xb1\xff\xba\x74\xe8\x22\xe7\x57\x17\xbc\x4c\x5a\x07\x15\xcd\xb7\xed\xa7\xa5\x44\xfc\x3b\x00\x00\xff\xff\xb2\xe0\xd8\xa2\x02\x16\x00\x00")

func vaultedEnv1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedEnv1,
		"vaulted-env.1",
	)
}

func vaultedEnv1() (*asset, error) {
	bytes, err := vaultedEnv1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-env.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedLoad1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xce\x5f\x6a\x03\x21\x18\x04\xf0\x77\x4f\x31\x17\x88\xd0\x23\xb4\x69\x20\x16\xea\xca\x9a\x97\x82\x2f\xb2\x7e\x12\x61\xab\x41\xbf\xdd\x5e\xbf\x54\xfb\x8f\xbc\x0d\x0c\xc3\x6f\xe4\xe5\x8c\xdd\x6f\x2b\x53\x70\x87\xb5\xf8\x80\x07\x21\xed\x19\xfa\xf1\xf5\x24\xa4\x31\xe2\xbb\x44\xef\xdc\x01\x5b\xa3\x86\x17\x3b\x69\xdc\x6a\xd9\x53\xa0\x00\x2e\x68\x1c\x52\xfe\x0a\x4b\x25\xcf\x84\x52\x51\xe9\xb6\xfa\x85\xc0\x57\xc2\x52\x32\x53\x66\x94\x08\x3f\xb8\x8e\xd8\x37\x3d\x19\xab\x6c\x87\x5c\x7c\x72\xf1\xf8\x9f\x73\x71\x86\x8b\x2a\xfb\x77\x72\xd1\xf4\xc5\xf3\xc9\x1e\x67\x65\x2e\x6a\xd2\x7d\x34\x0f\xa4\xdd\x2b\x7f\x33\x7c\x24\xbe\x8e\xc3\x3f\xfd\xef\xf1\x3d\xf9\xf1\x5c\x8a\xcf\x00\x00\x00\xff\xff\x29\xac\xab\x44\x08\x01\x00\x00")

func vaultedLoad1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedLoad1,
		"vaulted-load.1",
	)
}

func vaultedLoad1() (*asset, error) {
	bytes, err := vaultedLoad1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-load.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedLs1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8d\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\x3f\x40\x1b\xf0\x08\x5a\x0b\x2d\x68\x1b\x3a\xdd\x08\xd9\x14\x9a\x40\x60\x68\xc4\x99\x7a\x7e\x21\x0a\x82\xb8\xfd\xef\x3d\xbe\x9d\x3b\x3c\x97\x9d\x35\xac\xbe\x66\xc1\xc1\x58\xea\x30\x1c\xaf\xad\xb1\xce\x99\x0f\x02\x0b\x7c\x0d\x4e\xa2\x82\x85\xf9\x9d\x48\x71\xe9\x36\x8c\x8e\x7a\x2a\xbe\x8f\x27\x1f\x9b\x6f\xe5\xe3\xf4\x6f\x4f\xa2\x85\x50\x87\x73\x4b\xcd\xd4\xbb\xb9\x1f\x87\x62\x5e\x7e\x3e\x2a\xe4\x2d\xe0\x1e\x1e\xe0\xb4\x85\x0a\x9a\x21\xba\xe6\x5d\xad\x79\x05\x00\x00\xff\xff\x8d\xa8\x1b\x0a\xbc\x00\x00\x00")

func vaultedLs1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedLs1,
		"vaulted-ls.1",
	)
}

func vaultedLs1() (*asset, error) {
	bytes, err := vaultedLs1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-ls.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedRm1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xcd\x6a\xc4\x20\x14\x85\xf7\x79\x8a\xb3\x9a\x55\x47\xe8\x23\xb4\xd3\x81\x64\xd1\x8c\xc4\x6c\x0a\x6e\x4c\xbc\x36\x42\xa2\x53\x35\x43\xe7\xed\x4b\x1c\xa1\x3f\x94\xd9\x09\x9e\xef\x7c\xf7\xb0\xbe\xc6\x45\xad\x73\x22\x2d\xf7\x61\xc1\x63\xc5\x44\x8d\xf6\xe9\xf5\x58\x31\xce\xab\xf2\x85\xb0\x40\xee\x11\x68\xf1\x17\x8a\xa0\x4f\x1b\x93\x75\xef\x37\x32\x66\x44\xbc\xb5\x27\x2e\x1a\x91\x31\x69\x9e\xa5\x39\x7c\xc3\xd2\x74\x90\xa6\x71\x6a\x21\x69\xf8\xf6\x94\x3b\xc6\x98\x34\xfc\x9f\xb8\xa6\x99\x12\xdd\x43\x86\xf0\xd7\x90\x0f\xbb\x87\x88\x1a\x2f\x47\x71\xe8\x1a\xde\x37\xa7\x36\x5b\xbb\xb2\x26\x4d\x54\x86\x20\x9e\x69\xb4\xc6\x92\xc6\x70\xfd\x51\x25\x77\x0c\xfd\x44\xdb\xee\x84\xd1\x6b\x82\x8d\xa0\x8f\x55\xcd\x48\x3e\xf3\x6e\x5d\x06\x0a\xf0\xa6\x2a\x4d\x69\x52\x5b\x74\x9d\x35\x9c\x4f\x18\xa8\xdc\xa8\x59\x76\x37\x06\xea\x26\xc5\xa8\xdc\xef\xc4\x43\x6e\xa4\x10\x7c\xd8\x3c\xda\xc6\xf3\xac\xae\xa4\xe1\x1d\x62\xd2\x7e\x4d\xac\xfa\x0a\x00\x00\xff\xff\xe6\x20\x08\x4c\xb7\x01\x00\x00")

func vaultedRm1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedRm1,
		"vaulted-rm.1",
	)
}

func vaultedRm1() (*asset, error) {
	bytes, err := vaultedRm1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-rm.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedShell1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x41\x6f\xdb\x3c\x12\xbd\xeb\x57\xcc\x6d\x1d\xc0\x51\x90\xb4\xa7\x2c\x72\xf0\x26\xde\x46\x48\xea\x08\xa6\xd3\x22\x58\x2f\x02\x5a\x1a\x59\x44\x29\x52\x25\x29\xbb\xfe\xf7\x1f\x86\x94\x64\x39\x51\x83\x02\x1f\xbe\x5b\x22\x89\x6f\xde\xcc\xbc\x79\x43\xc7\xab\x7b\xd8\xf1\x46\x3a\xcc\xd7\xe7\xb6\x44\x29\xe1\x32\x8a\xd9\x3d\x2c\x66\x5f\xe7\x51\x9c\xa6\x51\xfb\x16\xc2\xcb\xf5\x39\x58\xc7\x8d\xb3\xc0\x15\x08\xe5\xd0\xf0\xcc\x89\x1d\xb6\xaf\xf7\xc2\x95\xe0\x4a\x04\x8b\x99\x41\x67\xa1\xd0\xc6\xff\xef\x51\x40\x6a\x9e\x63\x4e\xe7\x74\xf8\x8a\x0e\xf9\x70\xec\x65\xf1\x94\xb2\x84\xf9\x90\xeb\xe2\x3f\xeb\xe2\xf6\x24\xf0\xba\x58\xc2\xba\x48\x14\xaf\x70\x5d\xa4\xf0\xbf\x75\x91\x3c\xa5\xab\xe4\x69\xc1\xd6\x45\xfa\xff\x28\xde\x98\xb1\x53\xb0\x3e\x5f\x9f\x73\x6b\x1b\x3a\xe5\x01\xb8\x51\xa3\xe7\xd9\x3d\xdc\xcd\xd9\xed\x32\xf1\x0f\x3d\x0b\xf6\x41\x9e\x93\xc6\xa2\xf5\x29\x84\xa8\xec\x7e\xfe\xf8\x48\x21\x50\xed\x84\xd1\xaa\x42\xe5\x60\xc7\x8d\xe0\x1b\x89\x53\x10\x05\x58\x74\xff\x8e\xb4\x2b\xd1\xec\x85\x45\xc8\xb1\x20\xa2\x16\x9c\x6e\x21\x2e\x36\x42\x5d\xd8\x72\x5d\x2c\xcf\x62\xcf\xa7\xe5\x17\xc5\xab\xae\x22\xbf\xc9\x26\x62\x35\x66\xa2\x10\x2d\xa3\xa2\x91\x12\x66\xcb\x05\xe8\xc2\xff\x6f\xb4\x44\x0a\x13\x4e\xc6\xc0\xd0\xb3\x9e\x31\xf6\xfc\x35\x59\x7c\x81\x19\x2c\x9f\x1e\xe7\x54\x95\x0d\x4a\xbd\x8f\xa8\x65\x39\x3a\x2e\xa4\x05\xad\xa0\xd4\x7b\xf8\xd6\x16\x35\x40\x58\x0f\x69\xe3\x28\x4e\xd2\x68\x49\xe8\xfe\x79\xed\x84\x56\x50\xf1\x03\x6c\x10\x6a\x34\x85\x36\x15\xe6\x5e\x12\xba\x71\x60\x3d\xc9\x83\x50\x5b\xe0\xad\x1c\x9c\x06\x5b\xf3\xbd\x82\xc2\xe8\x2a\x8e\xbe\x97\x48\xb5\xde\xe9\x1f\x98\x83\x2b\x85\x85\x3d\x3f\x4c\x21\x33\x98\xa3\x72\x82\x4b\x0b\xdc\x20\x58\xdd\x98\x0c\x73\x7f\xa8\xab\x23\x48\x9d\x71\x8a\x6f\x61\x82\xf1\x36\x8e\x06\x7d\x98\x42\xa6\x55\x21\xb6\x8d\xf1\x5f\x40\x21\x24\xda\x29\x08\x65\x1d\x57\x19\x42\x6d\x34\x3d\x9a\x02\xba\x2c\xa6\xda\x9f\xd4\xdb\x60\x61\xd0\xb7\x25\x08\x02\x38\x28\xdc\x83\x45\x6b\x09\xcc\x0b\x9e\x1e\x38\xac\x6a\x6d\xb8\x39\x9c\xf2\x55\x39\x70\x68\x31\x30\x07\xfc\x55\x8b\x40\x23\xf4\x78\xf6\x9d\xc1\xc3\xfc\xc5\xeb\xad\x2b\xb2\x97\x56\x8d\xa6\xe2\x8a\x54\x34\x84\xb3\x4e\x1b\x3f\x3f\x83\x99\x72\x1a\xb6\xa8\xd0\x70\x87\x47\x12\xd1\xf0\x54\x63\xa9\xe8\x14\x8a\xad\x58\x0c\x2b\xd2\x04\xda\x46\x3a\x7a\xfc\xb6\xba\x5d\xad\xa8\x05\x1a\x24\xb7\x8e\x66\x38\xa2\x78\x79\x57\xc1\x56\x58\x21\x7e\x57\x89\xc9\xe0\xe4\x4e\x70\x38\x1d\x47\xcc\x85\x6b\xa5\x9d\xa6\xd1\x6a\xb4\x58\x55\x63\x1d\x69\xa7\xb1\x21\x47\x6d\x72\x34\x47\xe5\x52\x21\xb5\xc4\xb8\xb5\x88\x64\xa1\x1d\x5e\x07\xd9\x66\xbc\xb1\xd8\xab\x74\x38\x5b\xb6\xd9\x58\x27\x5c\xe3\x73\x1d\x2f\x2a\xb5\x30\x1a\x6d\xdf\xd4\xa7\x39\xfc\xf6\xa0\x1b\xd2\xcb\x4e\xe4\x7e\xa4\xba\x88\x24\x7a\xa5\x1d\x54\xdc\x65\x65\xe4\x4a\x6d\x91\x12\xe0\x41\xde\xe4\x46\xa1\x48\xf1\xfb\x46\x53\x5b\x48\x88\x39\x37\xf9\xa8\x7b\x04\x0f\x1d\x90\xb8\x8e\xe2\x25\xa3\xd9\x83\xf5\x64\xd3\xc0\x55\x2b\xd6\xd9\x77\xf6\x3a\xbb\xbd\x9d\x33\xf6\xfa\x30\x7f\x79\x4d\xee\x48\xb2\xe4\x8b\x33\x05\xc2\x9f\x2d\x04\x9a\xde\x90\x79\x96\xa1\xb5\xf0\x03\x0f\x31\x3c\x2b\xf1\xb3\xf1\x09\x21\xcf\x4a\xb2\x2a\x6a\xf1\xb1\x5a\xd4\xff\xb1\xfa\xc4\xe3\x2c\xd8\xfc\x76\x39\x5f\x0d\xc8\x74\x4c\x56\xfd\x62\x08\x3d\xa6\xfe\x88\xad\x02\x83\x3f\x1b\xb4\xce\xfe\x03\x4c\x18\x4b\x9e\x16\xaf\xab\xa7\x87\xf9\x82\x3c\xf3\x02\x4e\x68\x3e\x2f\x93\xd5\x4b\xff\xd6\x73\x4c\x43\x77\x73\xd8\x93\x1b\x85\xd1\x19\x0f\xf9\x11\x14\x08\xdb\xe9\x24\x8f\xbc\x0c\xeb\x5a\x1b\x07\x12\xb7\x3c\x3b\x00\xbb\x7b\x20\xca\xcb\x79\x30\x81\x53\x27\xf6\x1a\x99\xbd\xb1\x6d\xc8\xb8\xa2\xd9\xb0\xad\xd5\xe7\x80\x82\x96\x49\x90\x99\x9f\xb2\x7f\xd9\x37\x46\x37\xd9\x09\x1e\x8d\x8f\x21\x68\x33\x80\xa2\x71\x3d\xee\xb2\xd3\x2d\xa3\x6b\xf7\x4e\xb8\x85\x30\xd6\xf5\xae\x13\x5c\x2e\xe3\x59\x49\x7f\xf6\x7e\x70\xba\xf9\x27\x1e\x71\x60\xfe\xd1\x60\x9b\xef\xb9\x3d\xb2\x39\xf3\x70\xfd\x7e\x3d\x3a\x55\x07\xec\x74\xb7\x5d\x82\x90\x43\x7d\xa8\x5c\x51\xc6\xa5\x24\x83\x13\x16\xb8\x94\x7a\x6f\xdb\xbb\x48\x7f\x70\x83\x81\x68\xee\xe9\x71\x90\x5a\x6d\xd1\x1c\x9d\xcd\x95\x5c\x0d\x50\x23\xa3\xa5\x04\x42\x85\xbd\x90\x32\x80\xc2\xa4\xe2\xbf\x44\xd5\x54\x24\xcd\x4b\x28\x75\x63\xce\xfa\xa0\x56\x43\x85\x5c\x51\x60\xee\x46\xf9\x79\x69\xf4\xdb\xd1\xcb\xdc\x09\xef\x6e\xb4\x46\x86\x0e\x20\x6c\xef\x1f\x7e\xd7\x0d\x72\x09\xfd\xf0\x0b\x73\x50\x58\x8a\x11\x3c\xab\x63\xf8\xd6\xb2\xc7\x7d\x5f\x58\xb8\x8c\x28\x8f\x29\x18\xdc\x72\x93\x4b\xb2\x86\xf6\x48\x0f\x71\xd4\xcb\x70\xff\xbc\x55\x5d\x60\x96\x28\xe0\x79\x2e\x5c\x5b\xf6\xf0\x75\xe7\x67\x47\x20\xbe\xd1\x3b\x9c\xf6\x36\xda\x4e\x8c\xed\xcf\x72\x19\x8d\x5b\xa2\x5f\xbb\x42\x51\x11\x03\x39\xbe\xa1\x3b\x46\x77\xdd\xf9\x8d\x45\x7e\x9b\x3d\x3f\xae\xe6\x77\xaf\xf3\xc5\xb7\x57\x9a\xb4\xd7\xd9\x72\x31\xf4\xa6\xd1\x9b\x53\xe8\x5f\x3e\xe2\x30\xef\xe1\x6e\x6f\x9f\x9e\x17\xab\x81\xf7\xae\x82\xd3\xea\x46\x39\x48\xee\x06\x99\x6f\x0e\xc7\x08\xb3\xe5\xe2\x4f\xd0\xe9\x46\x3e\xc4\xa5\xe9\x39\x61\xfa\xb7\xd0\xd3\xd9\xea\x7e\x88\x5e\x73\x57\xfe\x31\xfa\x32\x98\xd6\x7f\xb5\x01\xfc\xc5\xab\xda\x77\x20\x4d\x43\x17\x54\xf1\xee\x37\x44\x67\x30\xc0\x8d\xba\xe6\x7b\x7b\x2d\x78\x75\x7d\x7d\x79\x79\x79\x75\x75\xf5\xe9\xd3\xa7\xcf\x9f\x3f\x5f\x13\xfa\x05\x6b\x6a\x34\x74\xc3\x8c\xe2\x42\xf4\x61\xf6\xba\x91\x79\x2b\xe5\x4e\x8b\x85\xa6\xd1\x24\x61\x1f\x45\xb2\xc1\x60\x1b\xee\x94\xcc\x98\x0a\x6e\xfe\x98\xc8\x07\x4d\xbf\x19\x9e\x7b\xff\x21\xf5\xef\xe6\x03\x20\xea\xc0\xcd\xc5\x31\x53\x76\x0f\x5f\x9e\x13\x48\xb9\xb5\x7b\x6d\x72\x48\x8d\xae\x6a\x67\x7d\x2e\x5f\x9e\x93\xf5\xf9\x86\xd3\x12\xad\xbb\xf7\x75\x78\xdf\x6d\x0a\xbf\x61\x37\x07\xca\xdf\x0f\xfc\xd1\xe0\xbb\xc8\x33\xf6\x90\xce\x18\xa3\xae\x77\x45\xeb\x7f\x1d\x1c\x77\xc6\xe4\xf2\x8c\xf6\x00\xf9\x65\xa5\x0d\x76\x3f\x0d\xe2\xe8\xaf\x00\x00\x00\xff\xff\xd4\xa3\xbf\x2c\x3b\x0e\x00\x00")

func vaultedShell1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedShell1,
		"vaulted-shell.1",
	)
}

func vaultedShell1() (*asset, error) {
	bytes, err := vaultedShell1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-shell.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedUpgrade1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x4d\x6e\xc3\x20\x10\x85\xf7\x9c\x62\x2e\x10\xa4\x1e\xa1\x4d\x23\xc5\x8b\x3a\x96\xf1\xa6\x12\x9b\x89\x67\x88\x23\xd9\x90\xf2\x93\xb6\xb7\xaf\xc0\xa1\x0b\x2f\xb2\x43\xbc\xf7\xbe\x4f\x20\x87\x23\xdc\x31\xcd\x91\x49\xef\xd2\xed\xe2\x91\x18\x5e\x84\x54\x47\x68\x5f\x3f\x0e\x42\x76\x9d\x78\xe4\x50\x63\xbd\xab\xc7\x00\x33\x5f\x70\xfc\x5d\x11\x01\xa2\x83\x38\x31\x8c\xc9\x7b\xb6\x71\xbd\x05\xe3\xfc\x82\xb1\x20\xd5\x67\x7b\xea\x54\xa3\x0a\x56\x9b\x37\x6d\xf6\x1b\xb8\x36\x7d\x69\xbe\x1f\xd4\xbe\x6f\xba\xa1\x39\xb5\xa5\xdc\x33\xd2\xd6\x86\x96\x60\x74\xf6\xce\x3e\xab\x27\x5e\x9e\xf9\x25\x0c\x13\x43\xc0\x85\xc5\x0d\x43\xf8\x76\x9e\xe0\x1a\x20\x05\xa6\xdc\x58\x77\x2b\x8c\xe9\x61\x90\x45\x9d\x77\xfc\x73\x8d\x30\x3a\xe2\xbc\xe1\xaf\x84\x73\x75\xd9\xb4\x9c\xd9\x83\x33\xff\x7f\x30\x61\xae\xa6\x99\xc0\xba\x08\x67\xae\x4f\x23\x29\xfe\x02\x00\x00\xff\xff\x93\xa5\x62\x52\x6e\x01\x00\x00")

func vaultedUpgrade1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedUpgrade1,
		"vaulted-upgrade.1",
	)
}

func vaultedUpgrade1() (*asset, error) {
	bytes, err := vaultedUpgrade1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-upgrade.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaulted1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x61\x6f\xe3\x36\x12\xfd\x1c\xfe\x8a\xb9\x1c\x70\x1b\x03\x89\x92\x05\xee\xf6\xb0\x7b\xc0\x01\xde\xc4\xed\xba\xdd\xc4\x82\x95\x6c\x5b\x54\x8b\x05\x2d\x8d\x64\x62\x29\x52\xe5\x50\x76\xfc\xef\x8b\x21\x25\xc5\x71\x1c\x14\x68\x80\x00\x16\x39\xf3\xde\x9b\xe1\x70\x86\xc9\xfd\x27\xd8\xc8\x4e\x7b\x2c\xe1\xad\x48\xb2\x4f\x70\x37\xbd\x9d\x89\x24\x4d\xc5\xb0\x9c\x5f\x00\xb5\x72\x6b\x80\x90\x48\x59\x43\x50\x39\xdb\x00\x61\xd1\x39\xd4\x3b\x20\x6f\x1d\x96\xfc\xed\xd0\x53\xc0\xc8\x7e\xbb\x5b\xa4\xd9\x3c\x0b\x38\x79\xf5\x31\xaf\xae\x7b\xb4\xbc\x5a\x42\x5c\xc8\x2f\x4c\xfc\x98\x1b\xd9\x60\x5e\xa5\xf0\xfb\xb0\xa1\xf2\x6a\xf9\x55\x24\x2b\xf7\x37\x7c\xf3\x0b\x76\xe6\xad\xeb\xdb\x9b\xbc\x4a\x5f\x93\x30\xbf\x5e\xdc\xde\x4e\xef\x6e\x7a\xe7\xb9\x74\x35\x25\x49\x92\x57\xe9\xd7\x10\xc2\xcd\x2c\xbb\x5e\xce\xd3\xfb\xf9\xe2\x2e\x40\xcc\x2b\x30\xf6\xc0\x4f\x11\xb4\xce\x6e\x54\x89\xe5\x39\xbc\xe0\x40\xe5\xd7\xe8\x62\xee\xe8\x49\x10\x9c\xa9\x6a\x74\x9b\x80\x75\xa2\xb7\x90\x06\x94\xf1\xe8\x64\xe1\xd5\x06\x81\xd6\xa8\x75\xb2\x27\xbf\x8f\x0d\x1a\xb9\x83\x15\x42\x47\x58\x82\xb7\x50\xaa\xaa\x42\x87\xc6\x2b\xe9\x11\xfc\x1a\xf7\xa8\xc2\x41\x1d\x0a\xcb\xff\xf5\x86\xc0\x6e\x0d\x48\x57\x77\x0d\x1a\x4f\x49\x88\xb8\x0f\x2c\x13\xc9\xfd\x40\x29\xcb\x10\xc9\x65\x8f\x51\x38\x94\x1e\xf7\x57\x0c\x6e\xf3\x6a\x29\xe6\x4f\xba\xf5\x0e\xa2\x19\x05\x2d\x85\x35\x1e\x8d\x07\x5b\x81\x04\x83\xdb\x58\x6c\x09\x64\x88\x20\x92\x8f\xcb\xa1\xf8\x2e\x64\x59\xc2\xd9\xdb\x49\xb2\xc7\x5e\xb4\xcf\xc8\x6d\xbb\x63\xae\x6b\xdb\xaa\x63\xe0\x01\x08\xa4\x29\x81\xe4\x06\x09\x94\x07\x49\xfb\xa4\xb0\x55\x7e\xdd\x2f\xb4\x92\x68\x6b\x5d\x79\x44\x48\xd1\x1e\xea\x28\xbb\x86\x95\x88\x5f\x9c\x3a\x1a\x56\x44\xf7\x16\xc8\x97\xb6\x0b\xb4\x3f\x65\x8b\xbb\x23\xd8\x8c\x74\x88\x8e\xa5\xf2\x2f\x73\xc8\xab\x2f\xa9\x0c\xe0\xa3\x22\xaf\x4c\xfd\x6a\x1e\xd9\xf1\x05\x85\xd9\x30\xc3\xa2\xf3\x6d\xe7\x29\x56\x16\x14\xb6\x69\xa4\x29\x99\x44\x7a\xd0\x56\x8e\x57\x18\x2a\xeb\xc6\xb0\x94\xf1\x36\xe8\x88\xf5\x78\x84\xd0\x6c\x0e\xf9\x18\x8c\x09\x1f\x08\x63\x2a\xc6\x7a\xef\xb3\xa4\x0c\xff\x88\x75\x02\xd6\x81\xc3\x56\xcb\x02\x5f\x49\xed\x11\xd2\x20\xf7\x90\x95\xf6\xcb\x45\x2b\x0a\x69\xfd\xac\xc8\x13\x48\xad\xa3\x2f\x1d\x03\xa3\x43\x28\xd7\xec\x43\x95\xa8\xf1\x79\xd9\x3b\x6c\xec\x86\x57\xc4\x32\xfc\xa2\x83\x73\x39\xc6\xe2\x9a\x43\x96\x90\x51\x06\xc9\xbc\x74\xfe\x78\x03\x88\x45\x1b\xf2\xbf\x77\x38\xfc\x1d\x8f\x87\x13\x81\xe5\x5f\x9f\x52\x04\x3b\x10\xd0\xb5\xb5\x93\x65\x88\xe3\x21\xfe\x24\xd0\x58\xcb\x62\xd7\x87\x01\x3d\x6a\xd1\x39\xee\x30\x3d\x67\x65\x5d\x23\x8f\x9d\x4a\x8f\xd7\xd3\x64\x9f\x60\xf6\xeb\xfc\x1e\xae\x17\x37\x33\x6e\x2a\x99\x90\x5a\xaf\xec\xe3\xff\x44\xb1\x82\x62\x25\x0a\xd0\x2f\xfe\x13\x31\x7b\x54\x1e\x0a\x5b\xe2\xc9\x2d\x4a\xa3\x4c\x2d\xae\x4e\xb2\xae\x28\x90\x28\x11\xef\xfe\x7d\x32\x37\x1b\xa9\x55\x09\xd7\x9f\xe7\xd0\x91\xac\x11\xce\x08\x11\x1a\xa4\xf0\xc1\xd9\x69\xac\x43\x28\xd1\x4b\xa5\x69\x92\x88\x77\xff\x39\xb9\x5f\xa3\x43\xd8\xca\x90\xe3\xce\x38\x2c\xec\x06\x9d\x5c\x69\xe4\xca\x5c\x69\x6c\x9e\xf2\xdc\xc7\xa8\x34\x26\xe2\xdd\xfb\x93\x29\x38\xfc\xa3\x53\x71\xc2\xb9\x8d\x2a\x30\xb6\x7d\x24\x34\x5e\xef\xa0\x33\x72\x23\x95\x0e\x58\x67\x98\xd4\x09\x48\xfa\xce\xed\x65\x92\x88\xff\xbe\x1f\xe5\x0e\x0d\x07\xa8\x6b\x5b\xad\xb0\xe4\x73\x98\x85\x24\xfd\xf8\x30\x87\x74\xd8\x4e\x9d\x6d\x5a\x9e\xa2\x69\x2a\xa6\xda\xaf\x6d\x57\xaf\xe1\x4b\x3f\x89\xbd\x0b\x9d\xcf\x42\x23\xbf\x23\x50\xe7\x10\x76\xb6\x83\x42\x1a\x70\x58\x2a\x87\x85\xef\x0b\x34\xdc\x31\xae\x58\xee\x87\x95\x53\x68\x4a\x3a\x17\x64\x1b\xf4\xaa\x89\xcd\x51\x11\x90\x57\x5a\x73\x2c\x55\x9f\x0c\x6f\x79\xac\x80\x64\x4d\xf9\xc5\x4a\xf2\x88\x19\x95\xb7\x41\x5a\x02\x3f\x84\x02\x54\x24\x1c\x4a\xb2\xe6\x7c\x94\xc7\x3a\x56\xe1\x02\x57\xaa\xee\x5c\xbc\xed\x01\xcf\x0c\x49\x01\xd5\xb4\x1a\x79\xe8\x48\xaf\xac\x49\x06\xdf\x37\x24\x46\x0b\xe3\xb1\x76\x61\x9b\x35\x7a\xa7\xea\x1a\x19\x6c\xbb\x46\xd3\xcf\x37\x0e\xf1\xcb\xf4\xe1\xf3\xfd\xec\xe6\xdb\x34\xfb\x39\x9d\x66\x19\x07\xbb\x91\x4e\x85\x38\x38\x36\xf4\x71\x78\xa6\x56\x99\x70\x33\x5f\x75\xf3\x36\x76\x56\x2c\x3a\x1f\xdc\xf9\xf0\x63\x5b\x1c\xe5\xd2\x18\xc1\x56\x69\x2d\x0a\xc9\x71\x8d\xe7\x12\xc3\x8c\x08\xb1\x8b\x05\x08\x6a\xb1\x50\x95\x8a\x16\x31\x7d\x61\xb3\x23\x74\x5c\xa9\x62\xc8\x2d\x25\x70\x1f\x9c\x1c\x79\x68\xa5\x93\x0d\x7a\x74\xcf\xba\x26\xfb\xed\x49\x8c\x4f\x8f\x00\x88\x8f\x5e\x70\xd2\x4c\x6f\xb9\xe2\x2e\xc0\xf3\xbd\xf7\x62\xb6\x88\x7f\xfc\x10\xd8\xc8\xc0\x76\x1c\x6e\xa3\x2a\x06\x18\xcb\xc9\x76\x7e\xa8\x27\x87\xbe\x73\xfc\x60\x01\x8a\x17\x33\xdc\x57\x38\xbb\x9a\x24\x30\xe7\xae\x5d\x49\xa5\xb9\x38\xe3\xb2\xb1\x26\xbf\xb8\x9a\x08\x45\xbd\x27\xbf\x96\x58\xd8\xc8\xa3\x4c\xdb\x85\x82\x94\x2b\xeb\x7c\xb8\x1b\x69\x2a\x86\xec\xaa\x58\x13\x43\x78\x43\x7d\x70\x47\x94\x8d\x46\x22\xbd\x8b\xb7\x77\xec\xc1\x7d\x9c\xe2\x79\x9c\xd4\xdf\xcf\x3e\x24\x5a\xe7\x17\xbd\x61\x5e\x2d\x27\x91\x73\x61\xa0\x91\xc5\x22\x3b\xe7\xe0\x82\x3b\x4c\xdb\x56\x63\x56\x38\xd5\xfa\xd7\x12\xd8\x17\x3e\xbf\xc8\x3e\x04\x98\x64\x99\x89\xc4\x54\xe2\x9f\xff\xb8\xec\xc8\x5d\xae\x94\xb9\xe4\x31\x69\x49\x52\x00\x12\xc2\x1a\x70\x5d\x78\x82\x6d\x04\x00\x80\xaa\x40\xa3\xa9\xfd\x3a\xcc\x3d\x57\x6f\xe0\xff\x70\x15\x4e\x26\x6c\xf3\x1f\xa1\x1f\xdb\x1c\xe7\xc1\x63\x03\x6f\x07\xf3\x60\x85\x9a\xf0\x35\xf3\xd3\xa1\xc5\x7c\x38\x8d\xb6\xa6\x04\x55\x09\x31\x98\x56\xce\x1a\xdf\x58\xf2\xdf\x24\x37\xa8\xa2\x2f\x0d\x0b\xfc\xc2\x66\x96\x33\x65\x2a\x1b\xfa\xeb\x59\x2b\xb9\x57\xda\x27\x1f\xd8\xf3\x99\x4c\x02\xa6\xe7\x79\xb3\x0f\x75\x94\x60\x54\x5b\x2a\x6a\xb5\xdc\x41\xa9\xa4\xb6\xf5\x28\x3c\x76\x65\xe5\x35\xc2\x69\x5f\x0f\xa7\x71\x51\x15\x21\xf1\x5d\xc0\x0e\x2b\x6b\x55\x96\x68\x40\x1a\xda\xa2\x83\x12\xab\xfe\x41\x18\x3e\x4f\x4f\xc5\xc8\xc5\x37\x66\x2c\x45\x0e\xcd\x21\x75\xda\x8f\x69\x61\xe9\x82\x7f\xb8\xce\x88\xa4\x52\x22\x59\xce\xc4\x9f\x01\x00\x00\xff\xff\xf1\x15\x18\xa4\x29\x0d\x00\x00")

func vaulted1Bytes() ([]byte, error) {
	return bindataRead(
		_vaulted1,
		"vaulted.1",
	)
}

func vaulted1() (*asset, error) {
	bytes, err := vaulted1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"vaulted-add.1":     vaultedAdd1,
	"vaulted-cp.1":      vaultedCp1,
	"vaulted-dump.1":    vaultedDump1,
	"vaulted-edit.1":    vaultedEdit1,
	"vaulted-env.1":     vaultedEnv1,
	"vaulted-load.1":    vaultedLoad1,
	"vaulted-ls.1":      vaultedLs1,
	"vaulted-rm.1":      vaultedRm1,
	"vaulted-shell.1":   vaultedShell1,
	"vaulted-upgrade.1": vaultedUpgrade1,
	"vaulted.1":         vaulted1,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"vaulted-add.1":     &bintree{vaultedAdd1, map[string]*bintree{}},
	"vaulted-cp.1":      &bintree{vaultedCp1, map[string]*bintree{}},
	"vaulted-dump.1":    &bintree{vaultedDump1, map[string]*bintree{}},
	"vaulted-edit.1":    &bintree{vaultedEdit1, map[string]*bintree{}},
	"vaulted-env.1":     &bintree{vaultedEnv1, map[string]*bintree{}},
	"vaulted-load.1":    &bintree{vaultedLoad1, map[string]*bintree{}},
	"vaulted-ls.1":      &bintree{vaultedLs1, map[string]*bintree{}},
	"vaulted-rm.1":      &bintree{vaultedRm1, map[string]*bintree{}},
	"vaulted-shell.1":   &bintree{vaultedShell1, map[string]*bintree{}},
	"vaulted-upgrade.1": &bintree{vaultedUpgrade1, map[string]*bintree{}},
	"vaulted.1":         &bintree{vaulted1, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
